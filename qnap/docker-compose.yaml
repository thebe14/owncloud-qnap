networks:
  owncloud-network:
    external: true
  traefik-network:
    external: true

volumes:
  shadow-db:
  redis-data:
  traefik-certificates:

services:
  mariadb:
    image: ${OWNCLOUD_MARIADB_IMAGE_TAG}
    volumes:
      - ${NAS_MARIADB_PATH}:/var/lib/mysql
    environment:
      MARIADB_DATABASE: ${OWNCLOUD_DB_NAME}
      MARIADB_USER: ${OWNCLOUD_DB_USER}
      MARIADB_PASSWORD: ${OWNCLOUD_DB_PASSWORD}
      MARIADB_ROOT_PASSWORD: ${OWNCLOUD_DB_ADMIN_PASSWORD}
    networks:
      - owncloud-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  redis:
    image: ${OWNCLOUD_REDIS_IMAGE_TAG}
    command: ["--databases", "1"]
    volumes:
      - redis-data:/data
    networks:
      - owncloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  owncloud:
    image: ${OWNCLOUD_IMAGE_TAG}
    volumes:
      - ${NAS_FILES_PATH}:${DATA_PATH}
    environment:
      OWNCLOUD_DOMAIN: ${OWNCLOUD_HOSTNAME}
      OWNCLOUD_TRUSTED_DOMAINS: ${OWNCLOUD_HOSTNAME}
      OWNCLOUD_DB_TYPE: mysql
      OWNCLOUD_DB_HOST: mariadb
      OWNCLOUD_DB_NAME: ${OWNCLOUD_DB_NAME}
      OWNCLOUD_DB_USERNAME: ${OWNCLOUD_DB_USER}
      OWNCLOUD_DB_PASSWORD: ${OWNCLOUD_DB_PASSWORD}
      OWNCLOUD_ADMIN_USERNAME: ${OWNCLOUD_ADMIN_USERNAME}
      OWNCLOUD_ADMIN_PASSWORD: ${OWNCLOUD_ADMIN_PASSWORD}
      OWNCLOUD_MYSQL_UTF8MB4: 'true'
      OWNCLOUD_REDIS_ENABLED: 'true'
      OWNCLOUD_REDIS_HOST: redis
    networks:
      - owncloud-network
      - traefik-network
    healthcheck:
      test: ["CMD", "/usr/bin/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # Match incoming requests on a specific hostname
      - "traefik.http.routers.owncloud.rule=Host(`${OWNCLOUD_HOSTNAME}`)"
      # Assign the router to a named Traefik service
      - "traefik.http.routers.owncloud.service=owncloud"
      # Use the 'websecure' (HTTPS) entry point
      - "traefik.http.routers.owncloud.entrypoints=websecure"
      # Define the internal container port for routing
      - "traefik.http.services.owncloud.loadbalancer.server.port=8080"
      # Enable TLS on this router
      - "traefik.http.routers.owncloud.tls=true"
      # Use Let's Encrypt for certificate management
      - "traefik.http.routers.owncloud.tls.certresolver=letsencrypt"
      # Pass the original Host header to the container
      - "traefik.http.services.owncloud.loadbalancer.passhostheader=true"
      # Apply a compression middleware
      - "traefik.http.routers.owncloud.middlewares=compresstraefik"
      # Define settings for the compression middleware
      - "traefik.http.middlewares.compresstraefik.compress=true"
      # Specify which Docker network Traefik should use for routing
      - "traefik.docker.network=traefik-network"
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_healthy

  traefik:
    image: ${TRAEFIK_IMAGE_TAG}
    command:
      # Set the log level (DEBUG, INFO, WARN, ERROR)
      - "--log.level=${TRAEFIK_LOG_LEVEL}"
      # Enable the built-in API and web-based dashboard
      - "--api.dashboard=true"
      # Enable the /ping endpoint so we can health-check Traefik
      - "--ping=true"
      # Assign the /ping endpoint to a dedicated entry point on port 8092
      - "--ping.entrypoint=ping"
      - "--entrypoints.ping.address=:8092"
      # Define the primary HTTP entry point
      - "--entrypoints.web.address=:80"
      # Define the secure (HTTPS) entry point
      - "--entrypoints.websecure.address=:443"
      # HTTP -> HTTPS redirect at entrypoint level
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Enable the Docker provider to detect containers and their labels
      - "--providers.docker=true"
      # Point Traefik to the Docker socket
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      # Prevent automatic exposure of all containers; only expose containers with "traefik.enable=true"
      - "--providers.docker.exposedbydefault=false"
      # Use ACME (Let's Encrypt) to generate/renew certificates via TLS challenge
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # Uncomment to use test certificates issued by "Fake LE Intermediate X1" aka the Let's Encrypt staging environment intermediate CA
      #- "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      # The email address used by Let's Encrypt for renewal notices
      - "--certificatesresolvers.letsencrypt.acme.email=${TRAEFIK_ACME_EMAIL}"
      # The file where ACME certificates are stored inside the container
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      # Enable Prometheus metrics
      - "--metrics.prometheus=true"
      # Configure Prometheus histogram buckets
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      # Check for newer Traefik versions and optionally log that info
      - "--global.checknewversion=true"
      # Disable sending anonymous usage data to the Traefik maintainers
      - "--global.sendanonymoususage=false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - "8098:80"
      - "8099:443"
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8092/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      # Enable Traefik for this container
      - "traefik.enable=true"
      # A router to expose the Traefik dashboard
      - "traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Basic Authentication for the Traefik dashboard
      - "traefik.http.routers.dashboard.middlewares=authtraefik"
      - "traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}"
      # Specify the internal server port to the dashboard service
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      # Pass the original Host header to the backend
      - "traefik.http.services.dashboard.loadbalancer.passhostheader=true"
    restart: unless-stopped

  backups:
    image: ${OWNCLOUD_MARIADB_IMAGE_TAG}
    command: >-
      sh -c 'sleep $BACKUP_INIT_SLEEP &&
      while true; do
        mariadb-dump -h mariadb -u $OWNCLOUD_DB_USER -p"$OWNCLOUD_DB_PASSWORD" $OWNCLOUD_DB_NAME | gzip > "$MARIADB_BACKUPS_PATH/$MARIADB_BACKUP_NAME-$(date '+%Y-%m-%d_%H-%M').gz" &&
        tar -zcpf $DATA_BACKUPS_PATH/$DATA_BACKUP_NAME-$(date "+%Y-%m-%d_%H-%M").tar.gz $DATA_PATH &&
        find $MARIADB_BACKUPS_PATH -type f -mtime +$MARIADB_BACKUP_PRUNE_DAYS | xargs rm -f &&
        find $DATA_BACKUPS_PATH -type f -mtime +$DATA_BACKUP_PRUNE_DAYS | xargs rm -f;
        sleep $BACKUP_INTERVAL; done'
    volumes:
      - shadow-db:/var/lib/mysql
      - ${NAS_FILES_PATH}:${DATA_PATH}
      - ${NAS_FILES_BACKUPS_PATH}:${DATA_BACKUPS_PATH}
      - ${NAS_MARIADB_BACKUPS_PATH}:${MARIADB_BACKUPS_PATH}
    environment:
      OWNCLOUD_DB_NAME: ${OWNCLOUD_DB_NAME}
      OWNCLOUD_DB_USER: ${OWNCLOUD_DB_USER}
      OWNCLOUD_DB_PASSWORD: ${OWNCLOUD_DB_PASSWORD}
      BACKUP_INIT_SLEEP: ${BACKUP_INIT_SLEEP}
      BACKUP_INTERVAL: ${BACKUP_INTERVAL}
      MARIADB_BACKUP_PRUNE_DAYS: ${MARIADB_BACKUP_PRUNE_DAYS}
      DATA_BACKUP_PRUNE_DAYS: ${DATA_BACKUP_PRUNE_DAYS}
      MARIADB_BACKUPS_PATH: ${MARIADB_BACKUPS_PATH}
      DATA_BACKUPS_PATH: ${DATA_BACKUPS_PATH}
      DATA_PATH: ${DATA_PATH}
      MARIADB_BACKUP_NAME: ${MARIADB_BACKUP_NAME}
      DATA_BACKUP_NAME: ${DATA_BACKUP_NAME}
    networks:
      - owncloud-network
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy
